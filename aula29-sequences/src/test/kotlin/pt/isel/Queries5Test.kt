/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package pt.isel

import pt.isel.sample.Student
import pt.isel.sample.toStudent
import java.io.File
import java.nio.file.Files
import kotlin.io.path.toPath
import kotlin.streams.asSequence
import kotlin.test.Test
import kotlin.test.assertContentEquals
import kotlin.test.assertEquals

class Queries5Test {
    private val lae2022uri = ClassLoader.getSystemClassLoader().getResource("lae2022.txt").toURI()


    @Test fun `First surname of a Student with number greater than 4700 and first letter A`() {
        val actual = Files
            .lines(lae2022uri.toPath())
            .asSequence()
            .parseCsv(';')
            .convert { it.toObject<Student>() }
            .where { it.nr > 47000 }
            .convert { it.name.split(" ").last() }
            .where { it.startsWith("A") }
            .iterator()
            .next()
        assertEquals("Almeida", actual)
    }

    @Test fun `Concat two sequences of strings with Lazy implementation of Iterable`() {
        val first = listOf("Portugal", "Football", "Teams")
        val other = listOf("FCP", "The", "Champion")
        val actual: Iterable<String> = first.concatLazy(other)
        val expected = listOf("Portugal", "Football", "Teams", "FCP", "The", "Champion")
        assertContentEquals(expected, actual)
    }
    @Test fun `Concat two sequences of strings with Lazy implementation of Sequence`() {
        val first = sequenceOf("Portugal", "Football", "Teams")
        val other = sequenceOf("FCP", "The", "Champion")
        val actual: Sequence<String> = first.concat(other)
        val expected = sequenceOf("Portugal", "Football", "Teams", "FCP", "The", "Champion")
        assertContentEquals(expected, actual)
    }

    @Test fun `Collapse a sequence of Strings`() {
        val letters: Sequence<String?> = sequenceOf(null, "a", "b", "b", "b", "a", "c", "a", "a", "x", "b")
        val actual: Sequence<String?> = letters.collapse()
        val expected = sequenceOf(null, "a", "b", "a", "c", "a", "x", "b")
        assertContentEquals(expected, actual)
    }

     @Test fun `Creates Window of size 3 of a sequence ofInt values`() {
        val nrs = sequenceOf(1,2,3,4,5,6,7,8)
        val expected = sequenceOf(
            sequenceOf(1,2,3),
            sequenceOf(4,5,6),
            sequenceOf(7,8),
        )
        val actual = nrs.window(3).iterator()
        expected.forEach {
            assertContentEquals(it, actual.next())
        }
    }
}

private fun <T> Sequence<T>.window(size: Int): Sequence<Sequence<T>> {
    return sequence {
        //....
        //...
        yield(sequence {
            //...
            //...
            // yield()
        })
    }
}

/**
 * Merges series of adjacent Elements.
 * NOTICE: Do not use any auxiliary standard operation of Kotlin such as first(), elementAt, etc...
 * Only use sequence{ ... yield()...} and iterator() if need.
 */
private fun <T : Any?> Sequence<T>.collapse(): Sequence<T> {

    val iterator = this.iterator()
    if(!iterator.hasNext()) return emptySequence()

    return sequence {
        var before: T = iterator.next()
        yield(before)
        while (iterator.hasNext()){
            val elem = iterator.next()
            if(elem != before){
                yield(elem)
                before = elem
            }
        }
    }
}
